$_describe_project: (
	breakpoints: (
		default: (
			mobile: 	767px,
			desktop: 	768px
		),
		smaller: (
			mobile: 	400px,
			desktop: 	401px
		),
		large: (
			mobile: 	999px,
			desktop: 	1000px
		),
	),
	colors: (
		black: 			#000,
		white:			#fff,

		gray-100:		#F4F5F7,
		gray-200:		#E5E7EB,
		gray-300:		#D2D6DC,
		gray-400:		#9FA6B2,
		gray-500: 		#a0aec0,
		gray-600: 		#718096,
		gray-700: 		#4a5568,
		gray-800: 		#2d3748,
		gray-900: 		#1a202c,

		red-100: 		#fff5f5,
		red-200: 		#fed7d7,
		red-300: 		#feb2b2,
		red-400: 		#fc8181,
		red-500: 		#f56565,
		red-600: 		#e53e3e,
		red-700: 		#c53030,
		red-800: 		#9b2c2c,
		red-900: 		#742a2a,
		
		orange-100: 	#fffaf0,
		orange-200: 	#feebc8,
		orange-300: 	#fbd38d,
		orange-400: 	#f6ad55,
		orange-500: 	#ed8936,
		orange-600: 	#dd6b20,
		orange-700: 	#c05621,
		orange-800: 	#9c4221,
		orange-900: 	#7b341e,

		yellow-100: 	#fffff0,
		yellow-200: 	#fefcbf,
		yellow-300: 	#faf089,
		yellow-400: 	#f6e05e,
		yellow-500: 	#ecc94b,
		yellow-600: 	#d69e2e,
		yellow-700: 	#b7791f,
		yellow-800: 	#975a16,
		yellow-900: 	#744210,

		green-100: 		#f0fff4,
		green-200: 		#c6f6d5,
		green-300: 		#9ae6b4,
		green-400: 		#68d391,
		green-500: 		#48bb78,
		green-600: 		#38a169,
		green-700: 		#2f855a,
		green-800: 		#276749,
		green-900: 		#22543d,
		
		teal-100: 		#e6fffa,
		teal-200: 		#b2f5ea,
		teal-300: 		#81e6d9,
		teal-400: 		#4fd1c5,
		teal-500: 		#38b2ac,
		teal-600: 		#319795,
		teal-700: 		#2c7a7b,
		teal-800: 		#285e61,
		teal-900: 		#234e52,

		blue-100: 		#ebf8ff,
		blue-200: 		#bee3f8,
		blue-300: 		#90cdf4,
		blue-400: 		#63b3ed,
		blue-500: 		#4299e1,
		blue-600: 		#3182ce,
		blue-700: 		#2b6cb0,
		blue-800: 		#2c5282,
		blue-900: 		#2a4365,

		indigo-100: 	#ebf4ff,
		indigo-200: 	#c3dafe,
		indigo-300: 	#a3bffa,
		indigo-400: 	#7f9cf5,
		indigo-500: 	#667eea,
		indigo-600: 	#5a67d8,
		indigo-700: 	#4c51bf,
		indigo-800: 	#434190,
		indigo-900: 	#3c366b,

		purple-100: 	#faf5ff,
		purple-200: 	#e9d8fd,
		purple-300: 	#d6bcfa,
		purple-400: 	#b794f4,
		purple-500: 	#9f7aea,
		purple-600: 	#805ad5,
		purple-700: 	#6b46c1,
		purple-800: 	#553c9a,
		purple-900: 	#44337a,

		pink-100: 		#fff5f7,
		pink-200: 		#fed7e2,
		pink-300: 		#fbb6ce,
		pink-400: 		#f687b3,
		pink-500: 		#ed64a6,
		pink-600: 		#d53f8c,
		pink-700: 		#b83280,
		pink-800: 		#97266d,
		pink-900: 		#702459,
	),
	color-pallet: (
		transparent: 	transparent,
		current:		currentColor,
	),
	font-families: (
		base: 			sans-serif,
		headings: 		sans-serif,
	),
	font-weights: (
		light: 			100,
		regular: 		400,
		bold: 			700,
	),
	font-sizes: (
		zero: 			0,
		smallest: 		1.2rem,
		small: 			1.4rem,
		base: 			1.6rem,
		large: 			1.8rem,
	),
	heading-sizes: (
		'0':			5.2rem,
		'1':			4rem,
		'2':			2.8rem,
		'3':			2.2rem,
		'4':			1.8rem,
		'5':			1.6rem,
		'6':			1.4rem
	),
	heading-colors: (
		'0':			'@colors.gray-800',
		'1':			'@colors.gray-800',
		'2':			'@colors.gray-800',
		'3':			'@colors.gray-800',
		'4':			'@colors.gray-800',
		'5':			'@colors.gray-800',
		'6':			'@colors.gray-800'
	),
	line-heights: (
		base: 			1.8,
		medium: 		1.25,
		heading: 		1.25,
		reset: 			1
	),
);

$_describe_extends: ();

@mixin break($size,$type:default) {
	$breakpoints: map-get($_describe_project, 'breakpoints');
	@if $size == desktop {
		@media (min-width: map-get(map-get($breakpoints, $type), $size)) {
			@content;
		}
	}

	@else if $size == mobile {
		@media (max-width: map-get(map-get($breakpoints, $type), $size)) {
			@content;
		}
	}
}

@mixin responsiveExtend($name){
	$breakpoints: map-get($_describe_project, 'breakpoints');
	// Default Extend
	%#{$name} {
		@content;
	}

	// Extend for every breakpoint in the breakpoints map. name-type-breakpoint, or for default name-breakpoint
	@each $label, $map in $breakpoints {
		@each $type, $map in map-get($breakpoints,$label) {
			$section: if($label == default,"",-#{$label});
			%#{$name}#{$section}-#{$type} {
				@include break($type,$label){
					@content;
				}
			}
		}
	}
}

@mixin describe($it,$is: ()) {
	@if $it == 'project' {
		$_describe_project: map-merge($_describe_project, $is) !global;
	}
	@else{
		@include responsiveExtend(#{$it}-base){
			@content;
		};
		$is: append($is, #{$it}-base, auto);
			
		// Default Extend
		$_describe_extends: map-merge($_describe_extends, (
			quote($it): $is
		)) !global;

		$breakpoints: map-get($_describe_project, 'breakpoints');

		// Extend for every breakpoint in the breakpoints map. name-type-breakpoint, or for default name-breakpoint
		@each $label, $map in $breakpoints {
			@each $type, $map in map-get($breakpoints,$label) {
				$section: if($label == default,'',-#{$label});
				$name: #{$it}#{$section}-#{$type};
				$extends: ();
				@each $ext in $is {
					$extends: append($extends, #{$ext}#{$section}-#{$type});
				}
				$_describe_extends: map-merge($_describe_extends, (
					quote($name): $extends
				)) !global;
			}
		}
	}	
}

@mixin extend($extends...) {
	@each $ext in $extends {
		@if map-has-key($_describe_extends, $ext) {
			@each $ext_item in map-get($_describe_extends,$ext) {
				@if map-has-key($_describe_extends, $ext_item) {
					@include extend($ext_item);
				}
				@else {
					@extend %#{$ext_item} !optional;
				}
			}
		}
	}
}
@function deep-map-check ($map, $keys...) {
	@if type-of($map) !='map' {
		@error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
	}

	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@return false;
		}

		$map: map-get($map, $key);
	}

	@return true;
}

@function deep-map-get ($map, $keys...) {
	@if type-of($map) !='map' {
		@error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
	}

	@each $key in $keys {
		$map: map-get($map, $key);
	}

	@return $map;
}

@function str-explode ($string, $delimiter: '') {
	@if type-of($string) !='string' {
		@error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
	}

	@else if type-of($delimiter) !='string' {
		@error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
	}

	$result: ();
	$running: true;

	@if str-length($delimiter)==0 {
		@for $i from 1 through str-length($string) {
			$result: append($result, str-slice($string, $i, $i));
		}

		@return $result;
	}

	@while $running {
		$index: str-index($string, $delimiter);

		@if $index !=null {
			$item: str-slice($string, 1, ($index - 1));
			$result: append($result, $item);
			$string: str-slice($string, ($index + str-length($delimiter)));
		}

		@else {
			$running: false;
		}
	}

	@return append($result, $string);
}

@function get ($key, $map) {
	$keys: str-explode($key, '.');

	@if not deep-map-check($map, $keys...) {
		@return false;
		//@error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
	}

	@return deep-map-get($map, $keys...);
}

@function solidGradient($color){
	@return linear-gradient(to bottom, $color, $color);
}

@function project($key){
	$item-map: map-get($_describe_project, $key);
	@if type-of($item-map) == 'map' {
		@each $key, $value in $item-map {
			@if type-of($value) == 'string' and str-slice($value,1,1) == '@' {
				$val: get(str-slice($value,2),$_describe_project);
				@if not $val {
					$val: $value;
				}
				$item-map: map-merge($item-map, (#{$key}: $val));				
			}

		}
	}
	@return $item-map;
}